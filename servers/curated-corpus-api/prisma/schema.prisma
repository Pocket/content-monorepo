generator client {
  binaryTargets   = ["native", "debian-openssl-1.1.x", "linux-arm64-openssl-1.1.x", "darwin"]
  output          = "../node_modules/.prisma/client"
  previewFeatures = ["tracing"]
  provider        = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model ApprovedItemAuthor {
  externalId     String       @id @default(uuid()) @db.VarChar(255)
  name           String       @db.VarChar(255)
  approvedItemId Int
  sortOrder      Int          @default(0)
  approvedItem   ApprovedItem @relation(fields: [approvedItemId], references: [id], onDelete: Cascade)

  @@index([approvedItemId])
}

model TrustedDomain {
  domainName String @id @db.VarChar(255)
}

model ExcludedDomain {
  domainName String @id @db.VarChar(255)
}

model ApprovedItem {
  id              Int                  @id @default(autoincrement())
  externalId      String               @unique @default(uuid()) @db.VarChar(255)
  url             String               @unique @db.VarChar(500)
  title           String               @db.VarChar(255)
  excerpt         String               @db.Text
  status          CuratedStatus        @default(CORPUS)
  language        String               @db.VarChar(2)
  publisher       String               @db.VarChar(255)
  datePublished   DateTime?            @db.Date
  imageUrl        String               @db.VarChar(500)
  topic           String?              @db.VarChar(255)
  isCollection    Boolean              @default(false)
  isSyndicated    Boolean              @default(false)
  createdAt       DateTime             @default(now())
  createdBy       String               @db.VarChar(255)
  updatedAt       DateTime             @updatedAt
  updatedBy       String?              @db.VarChar(255)
  prospectId      String?              @db.VarChar(255)
  isTimeSensitive Boolean              @default(false)
  source          CuratedItemSource?
  authors         ApprovedItemAuthor[]
  scheduledItems  ScheduledItem[]
  domainName      String               @db.VarChar(255)
  grade           ApprovedItemGrade?
  sectionItems    SectionItem[]

  @@index([domainName])
}

model RejectedCuratedCorpusItem {
  id         Int      @id @default(autoincrement())
  externalId String   @unique @default(uuid()) @db.VarChar(255)
  url        String   @unique @db.VarChar(500)
  title      String?  @db.VarChar(255)
  topic      String?  @db.VarChar(255)
  language   String?  @db.VarChar(2)
  publisher  String?  @db.VarChar(255)
  reason     String   @db.VarChar(255)
  createdAt  DateTime @default(now())
  createdBy  String   @db.VarChar(255)
  prospectId String?  @db.VarChar(255)
}

model ScheduledItem {
  id                   Int                 @id @default(autoincrement())
  externalId           String              @unique @default(uuid()) @db.VarChar(255)
  approvedItemId       Int
  createdAt            DateTime            @default(now())
  createdBy            String              @db.VarChar(255)
  updatedAt            DateTime            @updatedAt
  updatedBy            String?             @db.VarChar(255)
  scheduledDate        DateTime            @db.Date
  scheduledSurfaceGuid String              @db.VarChar(50)
  approvedItem         ApprovedItem        @relation(fields: [approvedItemId], references: [id])
  source               ActivitySource

  @@unique([approvedItemId, scheduledSurfaceGuid, scheduledDate], name: "ItemScheduledSurfaceDate")
  @@index([scheduledSurfaceGuid])
  // this index exists to assist serving content to new tab, which requests by surface and date
  @@index([scheduledSurfaceGuid, scheduledDate], name: "ScheduledSurfaceGuidScheduledDate")
}

model ScheduleReview {
  id                   Int      @id @default(autoincrement())
  scheduledSurfaceGuid String   @db.VarChar(50)
  scheduledDate        DateTime @db.Date
  reviewedAt           DateTime @db.Date
  reviewedBy           String   @db.VarChar(255)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  @@unique([scheduledSurfaceGuid, scheduledDate], name: "ScheduledSurfaceDate")
}

// Sections allows us to group ApprovedItems arbitrarily for display on surfaces
model Section {
  id                    Int             @id @default(autoincrement())
  // note - for ML-generated Sections, externalId will be set by ML
  externalId            String          @unique @default(uuid()) @db.VarChar(255)
  title                 String          @db.VarChar(255)
  scheduledSurfaceGuid  String          @db.VarChar(50)
  // sort may only apply during initial experimentation with ML-generated Sections,
  // meaning this field may be dropped
  sort                  Int?
  // we will not delete Sections, instead deactivate them
  active                Boolean         @default(false)
  // disables/enables sections. can only be set via the admin tool
  disabled              Boolean         @default(false)
  // track who created the Section
  createSource          ActivitySource // (ML or MANUAL) 
  // track who deactivated the Section
  deactivateSource      ActivitySource? // (ML or MANUAL)
  // track who updated the Section
  // initially, this will only be ML
  updateSource          ActivitySource? // (ML or MANUAL)
  // track when the Section was deactivated
  deactivatedAt         DateTime?
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt

  // relations
  sectionItems          SectionItem[]
}

model SectionItem {
  id                Int             @id @default(autoincrement())
  externalId        String          @unique @default(uuid()) @db.VarChar(255)
  sectionId         Int
  approvedItemId    Int
  // the initial rank of the SectionItem in relation to its siblings. used as a
  // fallback when there is no engagement/click data available. may only apply to
  // ML-generated SectionItems.
  rank              Int?
  // we will not delete SectionItem history, instead will deactivate items
  active            Boolean         @default(true)
  // track who deactivated the SectionItem
  deactivateSource  ActivitySource? // (ML or MANUAL)
  // track when the Section was deactivated
  deactivatedAt     DateTime?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  // relations
  section           Section         @relation(fields: [sectionId], references: [id])
  approvedItem      ApprovedItem    @relation(fields: [approvedItemId], references: [id])

  // access pattern for this table will be by section where active = true
  @@index([sectionId, active], name: "SectionIdActive")
}

enum CuratedStatus {
  RECOMMENDATION
  CORPUS
}

enum CuratedItemSource {
  PROSPECT
  MANUAL
  BACKFILL
  ML
}

enum ActivitySource {
  MANUAL
  ML
}

enum ApprovedItemGrade {
  A
  B
  C
}
