extend schema
  @link(
    url: "https://specs.apollo.dev/federation/v2.0"
    import: ["@key", "@shareable", "@requires", "@external", "@inaccessible"]
  )

"""
A URL - usually, for an interesting story on the internet that's worth saving to Pocket.
"""
scalar Url
"""
A date in the YYYY-MM-DD format.
"""
scalar Date
"""
A positive integer number.
"""
scalar NonNegativeInt

"""
Valid language codes for curated corpus items.
"""
enum CorpusLanguage {
  "German"
  DE
  "English"
  EN
  "Italian"
  IT
  "French"
  FR
  "Spanish"
  ES
}

"""
The source of en entity
"""
enum ActivitySource {
  """
  Manually entered through the curation admin tool
  """
  MANUAL
  """
  Created by ML
  """
  ML
}

"""
An author associated with a CorpusItem.
"""
type CorpusItemAuthor {
  name: String!
  sortOrder: Int!
}

"""
Represents IAB metadata for a Section.
Used by both admin input/output and public output.
"""
type IABMetadata {
  taxonomy: String!
  categories: [String!]!
}

"""
An entity containing Corpus Items.
"""
type Section {
  """
  An alternative primary key in UUID format.
  """
  externalId: ID!
  """
  The title of the Section displayed to the users.
  """
  title: String!
  """
  The GUID of the Scheduled Surface. Example: 'NEW_TAB_EN_US'.
  """
  scheduledSurfaceGuid: ID!
  """
  Optional IAB metadata returned to the client (i.e. Merino->Firefox, Admin Tools)
  """
  iab: IABMetadata
  """
  Controls the display order of Sections.
  """
  sort: Int
  """
  The source which created the Section.
  """
  createSource: ActivitySource!
  """
  Indicates whether or not a Section is available for display.
  """
  active: Boolean!
  """
  An array of active and in-active SectionItems in a Section.
  This field returns an empty array when creating a new Section or updating a Section.
  """
  sectionItems: [SectionItem!]!
  """
  Optional description for the Section.
  """
  description: String
  """
  Optional hero title for the Section.
  """
  heroTitle: String
  """
  Optional hero description for the Section.
  """
  heroDescription: String
}

"""
A CorpusItem belonging to a Section
"""
type SectionItem {
  """
  An alternative primary key in UUID format that is generated on creation.
  """
  externalId: ID!
  """
  The initial rank of the SectionItem in relation to its siblings. Used as a
  fallback in Merino when there is no engagement/click data available. May only apply to
  ML-generated SectionItems.
  """
  rank: Int
}

"""
Available fields for filtering Sections.
"""
input SectionFilters {
  """
  Required filter to retrieve Sections & SectionItems for a Scheduled Surface
  """
  scheduledSurfaceGuid: ID!
}

"""
Information about pagination in a connection.
"""
type PageInfo @shareable {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
}
"""
Pagination request. To determine which edges to return, the connection
evaluates the `before` and `after` cursors (if given) to filter the
edges, then evaluates `first`/`last` to slice the edges (only include a
value for either `first` or `last`, not both). If all fields are null,
by default will return a page with the first 30 elements.
"""
input PaginationInput {
  """
  Returns the elements in the list that come after the specified cursor.
  The specified cursor is not included in the result.
  """
  after: String
  """
  Returns the elements in the list that come before the specified cursor.
  The specified cursor is not included in the result.
  """
  before: String
  """
  Returns the first _n_ elements from the list. Must be a non-negative integer.
  If `first` contains a value, `last` should be null/omitted in the input.
  """
  first: Int
  """
  Returns the last _n_ elements from the list. Must be a non-negative integer.
  If `last` contains a value, `first` should be null/omitted in the input.
  """
  last: Int
}
